==================================== FUNDEMENTALS ====================================

bits
1     bit
4     nibble
8     byte
16    half word
32    word
64    long word

BASE (N) FORMATS
Common Formats

Base 2 - 01000010 01100001 01110011 01100101 00100000 00110010
Base 10 - 66 97 115 101 32 49 48
Base 16 - 42 61 73 65 20 31 36
Base 64 - QmFzZSA2NA==

can use tools for any conversion related needs like the programming mode calculator built into the workstation

Encapsulation and Decapsulation

Layer 4 - TCP Segment
Layer 3 - IP Packet
Layer 2 - Ethernet Frame
Layer 1 - Bits

PHYSICAL LAYER
OSI LAYER 1

RESPONSIBILITIES

Hardware Specifications
Encoding and Signaling
Data Transmission and Reception
Physical Network Design


DATA LINK LAYER
OSI LAYER 2

DATA LINK SUB-LAYERS

MAC (Media Access Control)
LLC (Logical Link Control)

ETHERNET HEADER
Dest. Mac = 6 bytes |
Src. Mac  = 6 bytes | - Mac Header/Trailer
Ethertype = 2 bytes |

Payload/Data/SDU = 46-1500 Bytes

CRC/FCS = 4 Bytes

802.1Q HEADER - adds a VLAN TAG between the Src. Mac and the Ethertype that is 4 bytes

ARP HEADER - downloaded image

Ethertypes
0x0800  IPv4
0x0806  ARP
0x86DD  IPv6
0x8100  VLAN TAG


NETWORK LAYER
OSI LAYER 3

IPv4, IPv6, and ICMP downloaded image

TTL values can show what OS a packet was generated from 64 being Linux, 128 being windows, and 255 being cisco routers

Fragmentation (IPv4) splits large amounts of data into multiple packets in order to send it all, turning on the fragmentation offset and and more fragments bit until the last packet which just has an offset

ZERO CONFIGURATION (what happens to something that isnt configured)
IPv4 Auto Configuration
* APIPA
* RFC 3927

IPv6 auto configuration
* SLAAC (StateLess Address Auto-configuration)
* RFC 4862

TRANSPORT LAYER
OSI LAYER 4

TCP and UDP header downloaded
(for tcp flags read like trying to read binary from left to right)

TCP uses 3-way handshake to establish connection sending a SYN receiving a SYN/ACK then responding with an ACK then tears down with two sets sent by both machines of FIN/ACK followed by ACK

SESSION LAYER
OSI LAYER 5

PROTOCOLS
SOCKS
NetBIOS
PPTP/L2TP
RPC

SOCKS 4/5 (TCP 1080)
Uses various Client / Server exchange messages
Client can provide authentication to server
Client can request connections from server

PPTP (TCP 1723)

L2TP (TCP 1701)

SMB/CIFS (TCP 139/445 AND UDP 137/138)
SMB Rides over Netbios
Netbios Dgram Service - UDP 138
Netbios Session Service - TCP 139
SAMBA and CIFS are just flavors of SMB

RPC (ANY PORT)
RPC is a request/response protocol.
User application will:
Sends a request for information to a external server
Receives the information from the external server
Display collected data to User

PRESENTATION LAYER
OSI LAYER 6

RESPONSIBILITIES
Translation
Formating
Encoding (ASCII, EBCDIC, HEX, BASE64)
Encryption (Symmetric or Asymmetric)
Compression

APPLICATION LAYER
OSI LAYER 7

FTP (TCP 20/21)
Messages:
FTP Commands
FTP Reply Codes
Modes:
Active (default)
Passive

FTP ACTIVE ISSUES
NAT and Firewall traversal issues
Complications with tunneling through SSH
Passive FTP solves issues related to Active mode and is most often used in modern systems

SSH (TCP 22)
Messages provide:
Client/server authentication
Asymmetric or PKI for key exchange
Symmetric for session
User authentication
Data stream channeling

SSH ARCHITECTURE 1
Server
Client
Session
Keys
User Key - Asymmetric public key used to identify the user to the server
Host Key - Asymmetric public key used to identify the server to the user
Session Key - Symmetric key created by the client

SSH ARCHITECTURE 2
Known-Hosts Database - collection of host keys that the client and server use for mutual authentication.
Agent - Stores keys as a convenience for users (prevents constant passphrase entry prompt)
Signer - signs the host-based authentication packets
Random Seed - used for entropy in creating pseudo-random numbers
Configuration File - settings that exist on the client and server to dictate configuration of ssh and sshd respectively

SSH IMPLEMENTATION CONCERNS
Using password authentication only
Key rotation
Key management
Implementation specification (libssh, sshtrangerthings)

TELNET (TCP 23)
Messages:
Telnet Commands
Telnet options

SMTP (TCP 25)
Messages:
SMTP Commands
SMTP Responses

TACACS (TCP 49) SIMPLE/EXTENDED (control logons)

HTTP(S) (TCP 80/443)
Messages:
Methods
GET / HEAD / POST / PUT
HTTP status Codes
100, 200, 300, 400

POP (TCP 110)
Messages:
POP Commands
POP Replies
POP Capabilities

IMAP (TCP 143)
Messages:
IMAP Commands
IMAP Status Response
IMAP Capabilities

RDP (TCP 3389)
Compression or Encryption support
Desktop size and color depth
Keyboard Mapping
Remote system control
Mouse-cursor color properties.

DNS (QUERY/RESPONSE) (TCP/UDP 53)

DHCP (UDP 67/68)

TFTP (UDP 69)
Messages:
TFTP Opcodes
TFTP Error Codes

NTP (UDP 123)

RADIUS (UDP 1645/1646 AND 1812/1813)

RTP (UDP ANY ABOVE 1023)

SNMP (UDP 161/162)
snmp
7 Message Types

Get Request
Set Request
Get Next
Get Bulk
Response
Trap
Inform

CAPTURE LIBRARY
What makes traffic capture possible?
Libpcap
WinPcap
NPCAP

WIRESHARK, TSHARK, TCPDUMP AND BPFS

BERKELEY PACKET FILTERS (BPF)
Requests a SOCK_RAW socket and setsockopt calls SO_ATTACH_FILTER
sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL))
...
setsockopt(sock, SOL_SOCKET, SO_ATTACH_FILTER, ...)

BERKELEY PACKET FILTERS
Using BPFs with operators, bitmasking, and TCPDump creates a powerful tool for traffic filtering and parsing.

tcpdump {A} [B:C] {D} {E} {F} {G}

A = Protocol (ether | arp | ip | ip6 | icmp | tcp | udp)
B = Header Byte offset
C = optional: Byte Length. Can be 1, 2 or 4 (default 1)
D = optional: Bitwise mask (&)
E = Operator (= | == | > | < | <= | >= | != | () | << | >>)
F = Result of Expresion
G = optional: Logical Operator (&& ||) to bridge expressions
w = write to a given fileExample:
tcpdump 'ether[12:2] = 0x0800 && (tcp[2:2] != 22 && tcp[2:2] != 23)'

BITWISE MASKING
To filter down to the bit(s) and not just the byte.
ip[0] & 0x0F > 0x05

FILTER LOGIC - MOST EXCLUSIVE
All designated bit values must be set; no others can be set
tcp[13] = 0x11
--or--
tcp[13] & 0xFF = 0x11

FILTER LOGIC - LESS EXCLUSIVE
All designated bits must be set; all others may be see
tcp[13] & 0x11 = 0x11

FILTER LOGIC - LEAST EXCLUSIVE
At least one of the designated bits must be set to not equal 0; all others may be set
tcp[13] & 0x11 !=0

LAYER 2 SWITCHING TECHNOLOGIES

SWITCH OPERATION
Fast Forward - Only Destination MAC
Fragment Free - First 64 bytes
Store and Forward - Entire Frame and FCS

CAM TABLE
Learn - Examining the Source MAC Address
Forward - Examining the Destination MAC Address

VLANS AND IEEE 802.1Q

IEEE 802.1AD "Q-IN-Q"

SPANNING TREE PROTOCOL (STP)
Root decision process
1. Elect root Bridge
2. Identify the Root ports on non-root bridge
3. Identify the Designated port for each segment
4. Set alternate ports to blocking state

LAYER 2 DISCOVERY PROTOCOLS
Cisco Discovery Protocol (CDP)
Foundry Discovery Protocol (FDP)
Link Layer Discovery Protocol(LLDP)

DTP (DYNAMIC TRUNKING PROTOCOL)

VTP (VLAN TRUNKING PROTOCOL)

PORT SECURITY
Modes
shutdown
restrict
protect

LAYER 3 ROUTING TECHNOLOGIES

routers contain routing tables based off of networks that connect switches to each other

METRICS
Hop
Bandwidth
Delay
Load
MTU
Reliability
Cost
Policy

routing protocols are used to learn and advertise routeing tables while routed protocols are how user traffic is passed around

administrative distance defines the importance of data being passed to the router


