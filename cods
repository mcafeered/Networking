Student#: student_17

Command: ssh student@10.50.35.85 -XStudent#: student_17

Command: ssh student@10.50.35.85 -X

Password: password

Password: password

sudo scapy (which uses the python scripting language)
use a=Ether() to set a new ethernet header to a variable, then use a.show() to show the ethernet or a.type=<value> to change the type value for example 
b=Dot1Q() creates a a vlan 802.1q header
c=ARP() creates a new arp header
d=IP() creates an ip header
e=ICMP() creates an icmp header
sendp(a/b/c/d/e, iface="eth0") this command sends layer 2 packets by defining what values to send in argument 1 and defining what interface to use in argument 2
sendp is for Layer 2 and send is for Layer 3

=======================================================================================================================================================

# ---- WELCOME TO CCTC NETWORKING ---- #

The map of the environment has been provided in your home directory:
    student_net_range_blue_only.png

All activity PCAPS are provided here:
    /home/activity_resources/pcaps 

Below are a series of useful commands installed on this Internet_Host to use while you are in this course.

    1. To view your IP address and interface information:
        a. current =        ip address (ip addr)
        b. deprecated =     ifconfig

    2. To view your ARP cache:
        a. current =        ip neighbor (ip nei)
        b. deprecated =     arp -a

    3. To view open TCP and UDP sockets:
        a. current = 
            i. TCP =        ss -antlp
            ii. UDP =       ss -anulp
        b. deprecated =     netstat

    4. To view active processes:
        a. static =         ps -elf
        b. real-time =      top or htop

    5. To open file manager from the command line or X11 connection:
        a. nautilus
        b. pcmanfm

    6. Web Browsers:
        a. Firefox
        b. Chromium
        c. Konqueror

    7. To open images from the command line or X11 connection:
        a. Eye of Gnome =                   eog [file]
        b. Nomacs =                         nomacs [file]
        c. Eye of Mate =                    eom [file]
        d. GNU Image Manipulation Program = gimp [file]

    8. Network scanning:
        a. nmap
            -sT = TCP Full connection
            -sS = TCP SYN scanning
            -Pn = Disable ping sweep
            -sU = UDP scanning
        b. zenmap
        c. netcat
            TCP: nc -nzvw1 10.10.0.40 21-23 80
            UDP: nc -unzvw1 10.10.0.40 53 69
        d. ping
        e. traceroute

    9. Network Utilization:
        a. iftop
        b. iptraf-ng

    10. Packet Manipulation (requires root privileges):
        a. scapy
        b. hping3
        c. yersinia     yersinia -G

    11. Packet Sniffing (requires root privileges):
        a. Wireshark
        b. tcpdump
        c. p0f
        d. tshark

    12. Banner Grabbing:
        a. netcat
            Client: nc 10.10.0.40 22
            Listener: nc -lvp 1234
        b. telnet
            telnet 10.10.0.40
        c. wget
            wget -r http://10.10.0.40
            wget -r ftp://10.10.0.40
        d. curl
            curl http://10.10.0.40
            curl ftp://10.10.0.40

    13. DNS Query:
        a. whois
        b. dig
            Records:
                A - IPv4
                AAAA - IPv6
                NS - Name Server
                SOA - Start of Authority
                MX - Mail Server
                TXT - Human readable message

    14. Remote access:
        a. ssh
            ssh student@10.10.0.40
            ssh student@10.10.0.40 -p 2222
        b. telnet
            telnet 10.10.0.40
            telnet 10.10.0.40 23

    15. File Transfer:
        a. scp
            scp student@10.10.0.40:file .
            scp file student@10.10.0.40:
        b. netcat
            nc 10.10.0.40 1234 < file
            nc -lvp 1234 > file

to do a MitM attack using arp
use a=ARP() and then set the op to is-at and change the dst and src ips and macs to spoof your mac and ip as the gateway
so for one of the packets your destination would be the gateway ip while changing the ip source to your target but leaving your mac as the source to spoof
another packet would have the same values but the ips would be swapped between the source and destination ips
when doing the sendp send an ethernet header with ARP (0x0806) defined first then send your arp packets one at a time ex sendp(a/b, iface="eth0") sendp(a/c, iface="eth0")

tcpdump -vv <what to filter for> makes the output more verbose while -X shows the hex dump 

STREAM SOCKET EXAMPLE CODE ================================================================================================================

#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# This can also be accomplished by using s = socket.socket(), because AF_INET, and SOCK_STREAM are defaults. #

ipaddr = '127.0.0.1'
port = 54321

s.connect((ipaddr, port))

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.send(b'Hello\n')

# It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
response, conn = s.recvfrom(1024)

# In order to receive a message that is sent as bytes-like-object, you must decode into utf-8 (default)
print(response.decode())

s.close()

to test the socket try echo "I got your message" | nc -l -p 54321 (where you netcat to the port specified in the code and receive the message while responding with your own)

STREAM SOCKET EXAMPLE CODE ======================================================================================================================

#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# This can also be accomplished by using s = socket.socket(), because AF_INET, and SOCK_STREAM are defaults. #

ipaddr = '127.0.0.1'
port = 54321

s.connect((ipaddr, port))

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.send(b'Hello\n')

# It is recommended that the buffersize used with recvfrom is a power of 2 and not a very large number of bits
response, conn = s.recvfrom(1024)

# In order to receive a message that is sent as bytes-like-object, you must decode into utf-8 (default)
print(response.decode())

s.close()

to test the socket try echo "I got your message" | nc -l -p 54321 (where you netcat to the port specified in the code and receive the message while responding with your own)

DATAGRAM SOCKET EXAMPLE ================================================================================================================

#!/usr/bin/env python3

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

ipaddr = '127.0.0.1'
port = 54321

# To send a string as a bytes-like object, add the prefix b to the string. \n is used to go to the next line
s.sendto(b'Hello\n', (ipaddr,port))

# It is recommended that the buffersize used with the recvfrom is a power of 2 and not a very large number of bits
response, conn = s.recvfrom(1024)

# In order to receive a message that is sent as a byte-like-object you must decode into UTF-8(default)
print(response.decode('UTF-8'))

to test use  echo "I got your message" | nc -l -p 54321 -u

RAW SOCKET IPv4 EXAMPLE

#!/usr/bin/env python3

# For building the socket
import socket

# For system level commands
import sys

# For establishing the packet structure. This will allow direct access to the methods and functions in the struct module
from struct import *

# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

# Add the IPv4 header information
ip_Ver_IHL = 69 # This is putting the decimal conversion of 0x45 for version and Internet Header Length
ip_tos = 0      # This combines the DSCP and ECN fields
ip_len = 0      # The kernel will fill in the actual length of the packet
ip_id = 12345   # This sets the IP identification for the packet
ip_frag = 0     # This sets the defragmentation to off
ip_ttl = 64     # This determines the TTL of the packet when leaving given machine
ip_proto = 16   # This sets the IP protocol to 16 (CHAOS) if this was 6(TCP) or 17(UDP) additional headers would be required
ip_check = 0    # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip) # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip) # inet_aton(string) will convert an IP address to a 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s', ip_Ver_IHL, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd) # B = byte, H = Half Word, 4s = Word

message = b'Gotem'
packet = ip_header + message

# Send the packet
s.sendto(packet, (dst_ip, 0))

check wireshark looking at your source ip address to see the packet

RAW SOCKET TCP EXAMPLE ============================================================================================ 

#!/usr/bin/env python3

# For building the socket
import socket

# For system level commands
import sys 

# For establishing the packet structure. This will allow direct access to the methods and functions in the struct module
from struct import *

# A module for th earray in the TCP Checksum
import array

# Create a raw socket
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
    print(msg)
    sys.exit()

packet = ''
src_ip = "10.1.0.2"
dst_ip = "10.3.0.2"

# Add the IPv4 header information
ip_Ver_IHL = 69 # This is putting the decimal conversion of 0x45 for version and Internet Header Length
ip_tos = 0      # This combines the DSCP and ECN fields
ip_len = 0      # The kernel will fill in the actual length of the packet
ip_id = 12345   # This sets the IP identification for the packet
ip_frag = 0     # This sets the defragmentation to off
ip_ttl = 64     # This determines the TTL of the packet when leaving given machine
ip_proto = 6    # This sets the IP protocol to 16 (CHAOS) if this was 6(TCP) or 17(UDP) additional headers would be required
ip_check = 0    # The kernel will fill in the checksum for the packet
ip_srcadd = socket.inet_aton(src_ip) # inet_aton(string) will convert an IP address to a 32 bit binary number
ip_dstadd = socket.inet_aton(dst_ip) # inet_aton(string) will convert an IP address to a 32 bit binary number

ip_header = pack('!BBHHHBBH4s4s', ip_Ver_IHL, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd) # B = byte, H = Half Word, 4s = Word

# TCP header
tcp_src = 54321    # Source port
tcp_dst = 7777     # Destination port
tcp_seq = 454      # Sequence port
tcp_ack_seq = 0    # tcp ack sequence number
tcp_data_off = 5   # data offset specifying the size of the tcp header which is multiplied by 4 (20 by default)
tcp_reserve = 0    # the 3 reserve bits + ns flag in the reserve field
tcp_flags = 0      # Tcp flags filed before the bits are turned on
tcp_win = 65535    # Maximum allowed window size reordered to network order
tcp_chk = 0        # tcp checksum will be calculated later on
tcp_urg_ptr = 0    # Urgent pointer only if the urg flag is set

# Combine the left shifted 4 bit tcp offset and the reserve field
tcp_off_res = (tcp_data_off << 4) + tcp_reserve

# TCP flags by bit starting from right to left
tcp_fin = 0    # Finished
tcp_syn = 1    # Synchronization
tcp_rst = 0    # Reset
tcp_psh = 0    # Push
tcp_ack = 0    # Acknowledgement
tcp_urg = 0    # Urgent
tcp_ece = 0    # Explicit
tcp_cwr = 0    # Congestion Window rEDUCED

# Combines the tcp flags by left shifting the bit locations and adding the bits together
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)

# The ! in the pack format string means netowrk order
tcp_hdr = pack('!HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_data_off, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

user_data = b'Soopers'

# Psuedo Header Fields
src_address = socket.inet_aton(src_ip)
dst_address = socket.inet_aton(dst_ip)
reserved = 0
protocol = socket.IPPROTO_TCP
tcp_length = len(tcp_hdr) + len(user_data)

# Pack the psuedo header and combine with user data
ps_hdr = pack('4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + user_data

def checksum(data):
    if len(data) % 2 != 0:
        data +=b'\0'
    res = sum(array.array("H", data))
    res = (res >> 16) + (res & 0xffff)
    res += res >> 16
    return (~res) & 0xffff

tcp_chk = checksum(ps_hdr)

#Pack the tcp header to fill in the correct checksum - remember checksum is not in Network Byte Order
tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H', tcp_chk) + pack('H', tcp_urg_ptr)

# Combine all of the headers and use the data
packet = ip_header + tcp_hdr + user_data

# Send the packet
s.sendto(packet, (dst_ip, 0))









